name: EDOPro dependencies
on: push
env:
  RELEASE_URL: ${{ format('https://api.github.com/repos/{0}/releases', github.repository) }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REF_TYPE: ${{ github.ref_type }}
  VCPKG_OVERLAY_PORTS: ports
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create release
      id: create_release
      if: github.ref_type == 'tag'
      uses: shogo82148/actions-create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ github.ref_name }}
        draft: false
        prerelease: false

  windows:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_name: 'win'
            package_name: installed_x86-windows-static.zip
            os: windows-2019
          - target_name: 'win17'
            package_name: installed_x86-windows-static-vs2017.zip
            os: windows-2022
          - target_name: 'win22'
            package_name: installed_x86-windows-static-vs2022.zip
            os: windows-2022
          - target_name: 'win19'
            package_name: installed_x86-windows-static-vs2019.zip
            os: windows-2019
          - target_name: 'win15'
            package_name: installed_x86-windows-static-vs2015.zip
            os: windows-2019
    runs-on: ${{ matrix.os }}
    needs: create-release
    env:
      ARCHIVE_NAME: ${{ matrix.package_name }}
      VCPKG_DEFAULT_TRIPLET: x86-windows-static
      SKIP_CMD: ${{ format('[skip-{0}]', matrix.target_name) }}
      NEW_CMD: ${{ format('[new-{0}]', matrix.target_name) }}
    steps:
    - uses: actions/checkout@v1
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      with:
        fetch-depth: 1
    - name: Install components
      if: (contains(github.event.head_commit.message, env.SKIP_CMD) != true && env.ARCHIVE_NAME == 'installed_x86-windows-static-vs2017.zip')
      run: |
              Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
              $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
              $componentsToAdd= @(
                "Microsoft.VisualStudio.Component.VC.v141.x86.x64"
              )
              [string]$workloadArgs = $componentsToAdd | ForEach-Object {" --add " +  $_}
              $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')
              # should be run twice
              $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
              $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
    - name: Customize vcpkg
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      shell: bash
      run: ./ci/patchup_vcpkg.sh
    - name: Set proper windows build tools in path vs2017
      if: |
        (contains(github.event.head_commit.message, env.SKIP_CMD) != true &&
          (env.ARCHIVE_NAME == 'installed_x86-windows-static.zip' || env.ARCHIVE_NAME == 'installed_x86-windows-static-vs2017.zip'))
      uses: ilammy/msvc-dev-cmd@v1
      with:
          arch: win32
          toolset: 14.16.27023
    - name: Set proper windows build tools in path vs2015
      if: (contains(github.event.head_commit.message, env.SKIP_CMD) != true && env.ARCHIVE_NAME == 'installed_x86-windows-static-vs2015.zip')
      uses: ilammy/msvc-dev-cmd@v1
      with:
          arch: win32
          toolset: '14.0'
    - name: Download and extract cached archive
      if: |
        (contains(github.event.head_commit.message, env.SKIP_CMD) != true &&
        contains(github.event.head_commit.message, '[new]') != true &&
        contains(github.event.head_commit.message, env.NEW_CMD) != true)
      shell: bash
      run: |
        ./ci/download_vcpkg_archive.sh
        ./ci/extract_vcpkg_archive.sh
    - name: Upgrade vcpkg dependencies
      if: |
        (contains(github.event.head_commit.message, env.SKIP_CMD) != true &&
        contains(github.event.head_commit.message, '[new]') != true &&
        contains(github.event.head_commit.message, env.NEW_CMD) != true)
      shell: cmd
      run: |
        vcpkg upgrade --no-dry-run
    - name: Install dependencies
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      shell: cmd
      run: |
        vcpkg install libevent openssl libgit2 ^
        freetype[bzip2,core,png,zlib] ^
        openal-soft ^
        curl[openssl] sqlite3 ^
        libflac libvorbis ^
        fmt nlohmann-json ^
        bzip2 libjpeg-turbo ^
        libpng zlib discord-rpc-payload
    - name: Zip binaries
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      id: zip_binaries
      shell: bash
      run: ./ci/zip_binaries.sh
    - name: Upload binaries to GitHub
      if: (github.ref_type == 'tag' && contains(github.event.head_commit.message, env.SKIP_CMD) != true)
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.zip_binaries.outputs.asset_path }}
        asset_name: ${{ env.ARCHIVE_NAME }}

  linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_name: 'linux'
            package_name: installed_x64-linux.7z
            triplet: x64-linux
          - target_name: 'linux64'
            package_name: installed_aarch64-linux.7z
            triplet: arm64-linux
    runs-on: ubuntu-latest
    container: ubuntu:18.04
    needs: create-release
    env:
      VCPKG_INSTALLATION_ROOT: /tmp/vcpkg
      ARCHIVE_NAME: ${{ matrix.package_name }}
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      SKIP_CMD: ${{ format('[skip-{0}]', matrix.target_name) }}
      NEW_CMD: ${{ format('[new-{0}]', matrix.target_name) }}
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      ACTIONS_RUNNER_FORCE_ACTIONS_NODE_VERSION: node16
    steps:
    - uses: actions/checkout@v1
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      with:
        fetch-depth: 1
    - name: Install APT prerequisities
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      run: |
        apt update
        apt-get install -y sudo yasm libgl1-mesa-dev libasound2-dev libpulse-dev libwayland-dev libxkbcommon-dev \
            g++ build-essential curl p7zip-full p7zip-rar zip unzip tar pkg-config git nodejs
    - name: Install aarch64 gcc
      if: (contains(github.event.head_commit.message, env.SKIP_CMD) != true && env.VCPKG_DEFAULT_TRIPLET == 'arm64-linux')
      run: |
        apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
    - name: Install vcpkg
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      run: |
        git clone https://github.com/microsoft/vcpkg $VCPKG_INSTALLATION_ROOT
        cd $VCPKG_INSTALLATION_ROOT
        ./bootstrap-vcpkg.sh --disableMetrics
        echo "PATH=$VCPKG_INSTALLATION_ROOT:$PATH" >> $GITHUB_ENV
    - name: Download and extract cached archive
      if: |
        (contains(github.event.head_commit.message, env.SKIP_CMD) != true &&
        contains(github.event.head_commit.message, '[new]') != true &&
        contains(github.event.head_commit.message, env.NEW_CMD) != true)
      shell: bash
      run: |
        ./ci/download_vcpkg_archive.sh
        ./ci/extract_vcpkg_archive.sh
    - name: Upgrade vcpkg dependencies
      if: |
        (contains(github.event.head_commit.message, env.SKIP_CMD) != true &&
        contains(github.event.head_commit.message, '[new]') != true &&
        contains(github.event.head_commit.message, env.NEW_CMD) != true)
      run: |
        vcpkg upgrade --no-dry-run
    - name: Install vcpkg dependencies
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      run: |
        vcpkg install \
          libevent sqlite3 \
          irrlicht-rectclip \
          freetype[bzip2,core,png,zlib] \
          curl openssl libgit2 fmt nlohmann-json \
          openal-soft \
          libflac libvorbis \
          discord-rpc-payload
    - name: Zip binaries
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      id: zip_binaries
      shell: bash
      run: ./ci/zip_binaries.sh
    - name: Upload binaries to GitHub
      if: (github.ref_type == 'tag' && contains(github.event.head_commit.message, env.SKIP_CMD) != true)
      uses: shogo82148/actions-upload-release-asset@v1.6.6
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.zip_binaries.outputs.asset_path }}
        asset_name: ${{ env.ARCHIVE_NAME }}

  osx-cctools:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_name: 'osx-cctools'
            package_name: installed_x64-osx-cctools.7z
            clang: x86_64-macosx
            compiler_arch: x86_64
            triplet: x64-osx
          - target_name: 'osx64-cctools'
            package_name: installed_aarch64-osx-cctools.7z
            clang: arm64-macosx
            compiler_arch: arm
            triplet: arm64-osx
    runs-on: ubuntu-latest
    needs: create-release
    env:
      CC: ${{ format('/opt/cctools/bin/{0}-clang', matrix.clang) }}
      CXX: ${{ format('/opt/cctools/bin/{0}-clang++', matrix.clang) }}
      AR: ${{ format('/opt/cctools/bin/{0}-apple-darwin11-ar', matrix.compiler_arch) }}
      RANLIB: ${{ format('/opt/cctools/bin/{0}-apple-darwin11-ranlib', matrix.compiler_arch) }}
      ARCHIVE_NAME: ${{ matrix.package_name }}
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      SKIP_CMD: ${{ format('[skip-{0}]', matrix.target_name) }}
      NEW_CMD: ${{ format('[new-{0}]', matrix.target_name) }}
      VCPKG_OVERLAY_TRIPLETS: triplets
      SDKROOT: /opt/cctools/sdk/MacOSX12.1.sdk
    steps:
    - uses: actions/checkout@v1
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      with:
        fetch-depth: 1
    - name: Download cctools
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      run: |
        cd /opt
        wget https://github.com/edo9300/cctools-build/releases/download/preview/cctools.tar.xz
        tar xf cctools.tar.xz
        cd cctools/bin
        ln x86_64-apple-darwin11-lipo -s lipo
        ln llvm-install-name-tool -s install_name_tool
        echo "PATH=/opt/cctools/bin:$PATH" >> $GITHUB_ENV
    - name: Fix openal-soft framework paths
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      shell: bash
      run: |
        rm ./ports/openal-soft/portfile.cmake
        mv ./ports/openal-soft/portfile-cctools.cmake ./ports/openal-soft/portfile.cmake
        rm ./ports/libevent/portfile.cmake
        mv ./ports/libevent/portfile-no-clock-gettime.cmake ./ports/libevent/portfile.cmake
    - name: Download and extract cached archive
      if: |
        (contains(github.event.head_commit.message, env.SKIP_CMD) != true &&
        contains(github.event.head_commit.message, '[new]') != true &&
        contains(github.event.head_commit.message, env.NEW_CMD) != true)
      shell: bash
      run: |
        ./ci/download_vcpkg_archive.sh
        ./ci/extract_vcpkg_archive.sh
    - name: Upgrade vcpkg dependencies
      if: |
        (contains(github.event.head_commit.message, env.SKIP_CMD) != true &&
        contains(github.event.head_commit.message, '[new]') != true &&
        contains(github.event.head_commit.message, env.NEW_CMD) != true)
      run: |
        vcpkg upgrade --no-dry-run
    - name: Build patched Irrlicht 1.9
      if: |
        (contains(github.event.head_commit.message, env.SKIP_CMD) != true &&
        (contains(github.event.head_commit.message, '[do-irr]') ||
        contains(github.event.head_commit.message, '[new]') ||
        contains(github.event.head_commit.message, env.NEW_CMD)))
      run: |
        curl --retry 5 --connect-timeout 30 --location --remote-header-name --remote-name \
          https://github.com/edo9300/irrlicht1-8-4/archive/1.9-custom.zip
        7z x irrlicht1-8-4-1.9-custom.zip
        cd irrlicht1-8-4-1.9-custom
        rm -r -f $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/include/irrlicht
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/include
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/lib
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/debug/lib
        make -f $(realpath ../irrlicht-cctools-makefile) -Csource/Irrlicht staticlib_osx NDEBUG=1 -j2
        cp -r include $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/include/irrlicht
        cp lib/MacOSX/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/lib
        make -f $(realpath ../irrlicht-cctools-makefile) -Csource/Irrlicht staticlib_osx NDEBUG=1 clean
        make -f $(realpath ../irrlicht-cctools-makefile) -Csource/Irrlicht staticlib_osx -j2
        cp lib/MacOSX/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/debug/lib
    - name: Install vcpkg dependencies
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      run: |
        vcpkg install \
          libevent openssl libgit2 \
          freetype[bzip2,core,png,zlib] \
          openal-soft \
          curl sqlite3 \
          libflac libvorbis \
          fmt nlohmann-json \
          discord-rpc-payload
    - name: 7-Zip binaries
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      id: zip_binaries
      shell: bash
      run: ./ci/zip_binaries.sh
    - name: Upload binaries to GitHub
      if: (github.ref_type == 'tag' && contains(github.event.head_commit.message, env.SKIP_CMD) != true)
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.zip_binaries.outputs.asset_path }}
        asset_name: ${{ env.ARCHIVE_NAME }}

  ios-cctools:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_name: 'ios-cctools'
            package_name: installed_aarch64-ios-cctools.7z
            clang: arm64-iphoneos
            compiler_arch: arm
            triplet: arm64-ios
            specific_sdk: iPhoneOS16.1.sdk
            target_sdk: iPhoneOS.sdk
          - target_name: 'iosv7-cctools'
            package_name: installed_armv7-ios-cctools.7z
            clang: armv7-iphoneos
            compiler_arch: arm
            triplet: arm-ios
            specific_sdk: iPhoneOS13.0.sdk
            target_sdk: iPhoneOS.sdk
          - target_name: 'iossim-cctools'
            package_name: installed_x64-iossim-cctools.7z
            clang: x86_64-iphonesimulator
            compiler_arch: x86_64
            triplet: x64-iossim
            specific_sdk: iPhoneSimulator16.1.sdk
            target_sdk: iPhoneSimulator.sdk
          - target_name: 'iossim64-cctools'
            package_name: installed_aarch64-iossim-cctools.7z
            clang: arm64-iphonesimulator
            compiler_arch: arm
            triplet: arm64-iossim
            specific_sdk: iPhoneSimulator16.1.sdk
            target_sdk: iPhoneSimulator.sdk
    runs-on: ubuntu-latest
    needs: create-release
    env:
      CC: ${{ format('/opt/cctools/bin/{0}-clang', matrix.clang) }}
      CXX: ${{ format('/opt/cctools/bin/{0}-clang++', matrix.clang) }}
      AR: ${{ format('/opt/cctools/bin/{0}-apple-darwin11-ar', matrix.compiler_arch) }}
      RANLIB: ${{ format('/opt/cctools/bin/{0}-apple-darwin11-ranlib', matrix.compiler_arch) }}
      ARCHIVE_NAME: ${{ matrix.package_name }}
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_OVERLAY_TRIPLETS: triplets
      SKIP_CMD: ${{ format('[skip-{0}]', matrix.target_name) }}
      NEW_CMD: ${{ format('[new-{0}]', matrix.target_name) }}
      SDKROOT: ${{ format('/opt/cctools/sdk/{0}', matrix.specific_sdk) }}
    steps:
    - uses: actions/checkout@v1
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      with:
        fetch-depth: 1
    - name: Download cctools
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      env:
        COMPILER_ARCH: ${{ matrix.compiler_arch }}
        SPECIFIC_SDK: ${{ matrix.specific_sdk }}
        TARGET_SDK: ${{ matrix.target_sdk }}
      run: |
        cd /opt
        wget https://github.com/edo9300/cctools-build/releases/download/preview/cctools-ios.tar.xz
        tar xf cctools-ios.tar.xz
        cd cctools/bin
        ln $COMPILER_ARCH-apple-darwin11-lipo -s lipo
        ln $COMPILER_ARCH-apple-darwin11-ranlib -s ranlib
        ln llvm-install-name-tool -s install_name_tool
        cd ../sdk
        ln $SPECIFIC_SDK -s $TARGET_SDK
        echo "PATH=/opt/cctools/bin:$PATH" >> $GITHUB_ENV
        if [[ $ARCHIVE_NAME == "installed_armv7-ios-cctools.7z" ]]; then
          echo "CFLAGS=-DBROKEN_CLANG_ATOMICS" >> $GITHUB_ENV
        fi
    - name: Download and extract cached archive
      if: |
        (contains(github.event.head_commit.message, env.SKIP_CMD) != true &&
        contains(github.event.head_commit.message, '[new]') != true &&
        contains(github.event.head_commit.message, env.NEW_CMD) != true)
      shell: bash
      run: |
        ./ci/download_vcpkg_archive.sh
        ./ci/extract_vcpkg_archive.sh
    - name: Upgrade vcpkg dependencies
      if: |
        (contains(github.event.head_commit.message, env.SKIP_CMD) != true &&
        contains(github.event.head_commit.message, '[new]') != true &&
        contains(github.event.head_commit.message, env.NEW_CMD) != true)
      run: |
        vcpkg upgrade --no-dry-run
    - name: Build patched Irrlicht 1.9
      if: |
        (contains(github.event.head_commit.message, env.SKIP_CMD) != true &&
        (contains(github.event.head_commit.message, '[do-irr]') ||
        contains(github.event.head_commit.message, '[new]') ||
        contains(github.event.head_commit.message, env.NEW_CMD)))
      run: |
        curl --retry 5 --connect-timeout 30 --location --remote-header-name --remote-name \
          https://github.com/edo9300/irrlicht1-8-4/archive/1.9-custom.zip
        7z x irrlicht1-8-4-1.9-custom.zip
        cd irrlicht1-8-4-1.9-custom
        rm -r -f $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/include/irrlicht
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/include
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/lib
        mkdir -p $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/debug/lib
        make -f $(realpath ../irrlicht-cctools-makefile) -Csource/Irrlicht staticlib_ios NDEBUG=1 -j2
        cp -r include $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/include/irrlicht
        cp lib/IOS/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/lib
        make -f $(realpath ../irrlicht-cctools-makefile) -Csource/Irrlicht staticlib_ios NDEBUG=1 clean
        make -f $(realpath ../irrlicht-cctools-makefile) -Csource/Irrlicht staticlib_ios -j2
        cp lib/IOS/libIrrlicht.a $VCPKG_INSTALLATION_ROOT/installed/$VCPKG_DEFAULT_TRIPLET/debug/lib
    - name: Install vcpkg dependencies
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      run: |
        vcpkg install \
          libevent openssl libgit2 \
          freetype[bzip2,core,png,zlib] \
          openal-soft \
          curl sqlite3 \
          libflac libvorbis \
          fmt nlohmann-json
    - name: 7-Zip binaries
      if: contains(github.event.head_commit.message, env.SKIP_CMD) != true
      id: zip_binaries
      shell: bash
      run: ./ci/zip_binaries.sh
    - name: Upload binaries to GitHub
      if: (github.ref_type == 'tag' && contains(github.event.head_commit.message, env.SKIP_CMD) != true)
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.zip_binaries.outputs.asset_path }}
        asset_name: ${{ env.ARCHIVE_NAME }}

  passthroughs:
    runs-on: ubuntu-latest
    needs: create-release
    if: github.ref_type == 'tag'
    strategy:
      fail-fast: true
      matrix:
        include:
          - target_name: '[skip-win]'
            package_name: installed_x86-windows-static.zip
          - target_name: '[skip-win15]'
            package_name: installed_x86-windows-static-vs2015.zip
          - target_name: '[skip-win17]'
            package_name: installed_x86-windows-static-vs2017.zip
          - target_name: '[skip-win19]'
            package_name: installed_x86-windows-static-vs2019.zip
          - target_name: '[skip-win22]'
            package_name: installed_x86-windows-static-vs2022.zip
          - target_name: '[skip-linux]'
            package_name: installed_x64-linux.7z
          - target_name: '[skip-linux64]'
            package_name: installed_aarch64-linux.7z
          - target_name: '[skip-osx-cctools]'
            package_name: installed_x64-osx-cctools.7z
          - target_name: '[skip-osx64-cctools]'
            package_name: installed_aarch64-osx-cctools.7z
          - target_name: '[skip-ios-cctools]'
            package_name: installed_aarch64-ios-cctools.7z
          - target_name: '[skip-iosv7-cctools]'
            package_name: installed_armv7-ios-cctools.7z
          - target_name: '[skip-iossim-cctools]'
            package_name: installed_x64-iossim-cctools.7z
          - target_name: '[skip-iossim64-cctools]'
            package_name: installed_aarch64-iossim-cctools.7z
    steps:
    - uses: actions/checkout@v1
      if: contains(github.event.head_commit.message, matrix.target_name)
      with:
        fetch-depth: 1
    - name: Download cached archive
      env:
        ARCHIVE_NAME: ${{ matrix.package_name }}
      if: contains(github.event.head_commit.message, matrix.target_name)
      run: ./ci/download_vcpkg_archive.sh
    - name: Reupload archive to GitHub
      if: contains(github.event.head_commit.message, matrix.target_name)
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ format('./{0}', matrix.package_name) }}
        asset_name: ${{ matrix.package_name }}
