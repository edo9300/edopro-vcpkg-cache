diff --git a/lib/config-win32.h b/lib/config-win32.h
index 316043d81..a75464d15 100644
--- a/lib/config-win32.h
+++ b/lib/config-win32.h
@@ -543,6 +543,11 @@
 #  endif
 #endif
 
+#undef _WIN32_WINNT
+#define _WIN32_WINNT 0x0501
+#undef WINVER
+#define WINVER 0x0501
+
 /* VS2008 default target settings and minimum build target check. */
 #if defined(_MSC_VER) && (_MSC_VER >= 1500) && (_MSC_VER <= 1600)
 #  ifndef _WIN32_WINNT
diff --git a/lib/curl_threads.h b/lib/curl_threads.h
index 65d1a790c..75f899467 100644
--- a/lib/curl_threads.h
+++ b/lib/curl_threads.h
@@ -23,6 +23,8 @@
  ***************************************************************************/
 #include "curl_setup.h"
 
+#undef _WIN32_WINNT
+
 #if defined(USE_THREADS_POSIX)
 #  define CURL_STDCALL
 #  define curl_mutex_t           pthread_mutex_t
diff --git a/lib/inet_ntop.c b/lib/inet_ntop.c
index 9a5af7f42..f3aef0964 100644
--- a/lib/inet_ntop.c
+++ b/lib/inet_ntop.c
@@ -20,6 +20,8 @@
 
 #include "curl_setup.h"
 
+#undef HAVE_INET_NTOP
+
 #ifndef HAVE_INET_NTOP
 
 #ifdef HAVE_SYS_PARAM_H
diff --git a/lib/inet_ntop.h b/lib/inet_ntop.h
index 9d3f237f3..384228b8a 100644
--- a/lib/inet_ntop.h
+++ b/lib/inet_ntop.h
@@ -24,6 +24,8 @@
 
 #include "curl_setup.h"
 
+#undef HAVE_INET_NTOP
+
 char *Curl_inet_ntop(int af, const void *addr, char *buf, size_t size);
 
 #ifdef HAVE_INET_NTOP
diff --git a/lib/inet_pton.c b/lib/inet_pton.c
index 9c87a0562..c65326caa 100644
--- a/lib/inet_pton.c
+++ b/lib/inet_pton.c
@@ -18,6 +18,7 @@
 
 #include "curl_setup.h"
 
+#undef HAVE_INET_PTON
 #ifndef HAVE_INET_PTON
 
 #ifdef HAVE_SYS_PARAM_H
diff --git a/lib/inet_pton.h b/lib/inet_pton.h
index e695af9c6..ef97245b9 100644
--- a/lib/inet_pton.h
+++ b/lib/inet_pton.h
@@ -26,6 +26,8 @@
 
 int Curl_inet_pton(int, const char *, void *);
 
+#undef HAVE_INET_PTON
+
 #ifdef HAVE_INET_PTON
 #ifdef HAVE_ARPA_INET_H
 #include <arpa/inet.h>
diff --git a/lib/curl_setup.h b/lib/curl_setup.h
index 727d123e5..d8f08dc04 100644
--- a/lib/curl_setup.h
+++ b/lib/curl_setup.h
@@ -71,6 +71,11 @@
 #    define CURL_WINDOWS_APP
 #  endif
 # endif
+
+#undef _WIN32_WINNT
+#define _WIN32_WINNT 0x0501
+#undef WINVER
+#define WINVER 0x0501
 #endif
 
 /*
diff --git a/lib/easy_lock.h b/lib/easy_lock.h
index 6399a39bd..105c2c637 100644
--- a/lib/easy_lock.h
+++ b/lib/easy_lock.h
@@ -26,84 +26,6 @@
 
 #include "curl_setup.h"
 
-#define GLOBAL_INIT_IS_THREADSAFE
-
-#if defined(_WIN32_WINNT) && _WIN32_WINNT >= 0x600
-
-#ifdef __MINGW32__
-#ifndef __MINGW64_VERSION_MAJOR
-#if (__MINGW32_MAJOR_VERSION < 5) || \
-    (__MINGW32_MAJOR_VERSION == 5 && __MINGW32_MINOR_VERSION == 0)
-/* mingw >= 5.0.1 defines SRWLOCK, and slightly different from MS define */
-typedef PVOID SRWLOCK, *PSRWLOCK;
-#endif
-#endif
-#ifndef SRWLOCK_INIT
-#define SRWLOCK_INIT NULL
-#endif
-#endif /* __MINGW32__ */
-
-#define curl_simple_lock SRWLOCK
-#define CURL_SIMPLE_LOCK_INIT SRWLOCK_INIT
-
-#define curl_simple_lock_lock(m) AcquireSRWLockExclusive(m)
-#define curl_simple_lock_unlock(m) ReleaseSRWLockExclusive(m)
-
-#elif defined(HAVE_ATOMIC) && defined(HAVE_STDATOMIC_H)
-#include <stdatomic.h>
-#if defined(HAVE_SCHED_YIELD)
-#include <sched.h>
-#endif
-
-#define curl_simple_lock atomic_int
-#define CURL_SIMPLE_LOCK_INIT 0
-
-/* a clang-thing */
-#ifndef __has_builtin
-#define __has_builtin(x) 0
-#endif
-
-#ifndef __INTEL_COMPILER
-/* The Intel compiler tries to look like GCC *and* clang *and* lies in its
-   __has_builtin() function, so override it. */
-
-/* if GCC on i386/x86_64 or if the built-in is present */
-#if ( (defined(__GNUC__) && !defined(__clang__)) &&     \
-      (defined(__i386__) || defined(__x86_64__))) ||    \
-  __has_builtin(__builtin_ia32_pause)
-#define HAVE_BUILTIN_IA32_PAUSE
-#endif
-
-#endif
-
-static inline void curl_simple_lock_lock(curl_simple_lock *lock)
-{
-  for(;;) {
-    if(!atomic_exchange_explicit(lock, true, memory_order_acquire))
-      break;
-    /* Reduce cache coherency traffic */
-    while(atomic_load_explicit(lock, memory_order_relaxed)) {
-      /* Reduce load (not mandatory) */
-#ifdef HAVE_BUILTIN_IA32_PAUSE
-      __builtin_ia32_pause();
-#elif defined(__aarch64__)
-      __asm__ volatile("yield" ::: "memory");
-#elif defined(HAVE_SCHED_YIELD)
-      sched_yield();
-#endif
-    }
-  }
-}
-
-static inline void curl_simple_lock_unlock(curl_simple_lock *lock)
-{
-  atomic_store_explicit(lock, false, memory_order_release);
-}
-
-#else
-
 #undef  GLOBAL_INIT_IS_THREADSAFE
 
-#endif
-
 #endif /* HEADER_CURL_EASY_LOCK_H */
-- 
2.38.1.windows.1
