From 02c2c2d8fd066ab4adb0dd62268fa81e98b6f147 Mon Sep 17 00:00:00 2001
From: Edoardo Lolletti <edoardo762@gmail.com>
Date: Sat, 19 Feb 2022 15:57:30 +0100
Subject: [PATCH] Openssl native windows certificates

---
 src/libgit2/streams/openssl.c | 133 ++++++++++++++++++++++++++++++++--
 1 file changed, 127 insertions(+), 6 deletions(-)

diff --git a/src/libgit2/streams/openssl.c b/src/libgit2/streams/openssl.c
index 5e0e2c939..3228f39c0 100644
--- a/src/libgit2/streams/openssl.c
+++ b/src/libgit2/streams/openssl.c
@@ -27,6 +27,8 @@
 # include <sys/types.h>
 # include <sys/socket.h>
 # include <netinet/in.h>
+#else
+# include <wincrypt.h>
 #endif
 
 #ifndef GIT_OPENSSL_DYNAMIC
@@ -715,15 +717,134 @@ int git_openssl__set_cert_location(const char *file, const char *path)
 {
 	if (openssl_ensure_initialized() < 0)
 		return -1;
+#ifdef GIT_WIN32
+	if(strncmp(file, "SYSTEM", sizeof("SYSTEM")) == 0){
+	    int result;
+	    X509_STORE *store = SSL_CTX_get_cert_store(git__ssl_ctx);
+	    HCERTSTORE hStore = CertOpenSystemStoreA((HCRYPTPROV_LEGACY)NULL, "ROOT");
+
+	    if(hStore) {
+		PCCERT_CONTEXT pContext = NULL;
+		/* The array of enhanced key usage OIDs will vary per certificate and is
+		   declared outside of the loop so that rather than malloc/free each
+		   iteration we can grow it with realloc, when necessary. */
+		CERT_ENHKEY_USAGE *enhkey_usage = NULL;
+		DWORD enhkey_usage_size = 0;
+
+		/* This loop makes a best effort to import all valid certificates from
+		   the MS root store. If a certificate cannot be imported it is skipped.
+		   'result' is used to store only hard-fail conditions (such as out of
+		   memory) that cause an early break. */
+		result = 0;
+		for(;;) {
+		    X509 *x509;
+		    FILETIME now;
+		    BYTE key_usage[2];
+		    DWORD req_size;
+		    const unsigned char *encoded_cert;
+
+		    pContext = CertEnumCertificatesInStore(hStore, pContext);
+		    if(!pContext)
+			break;
 
-	if (SSL_CTX_load_verify_locations(git__ssl_ctx, file, path) == 0) {
-		char errmsg[256];
+		    encoded_cert = (const unsigned char *)pContext->pbCertEncoded;
+		    if(!encoded_cert)
+			continue;
+
+		    GetSystemTimeAsFileTime(&now);
+		    if(CompareFileTime(&pContext->pCertInfo->NotBefore, &now) > 0 ||
+		       CompareFileTime(&now, &pContext->pCertInfo->NotAfter) > 0)
+			continue;
+
+		    /* If key usage exists check for signing attribute */
+		    if(CertGetIntendedKeyUsage(pContext->dwCertEncodingType,
+					       pContext->pCertInfo,
+					       key_usage, sizeof(key_usage))) {
+			if(!(key_usage[0] & CERT_KEY_CERT_SIGN_KEY_USAGE))
+			    continue;
+		    } else if(GetLastError())
+			continue;
+
+		    /* If enhanced key usage exists check for server auth attribute.
+		     *
+		     * Note "In a Microsoft environment, a certificate might also have EKU
+		     * extended properties that specify valid uses for the certificate."
+		     * The call below checks both, and behavior varies depending on what is
+		     * found. For more details see CertGetEnhancedKeyUsage doc.
+		     */
+		    if(CertGetEnhancedKeyUsage(pContext, 0, NULL, &req_size)) {
+			if(req_size && req_size > enhkey_usage_size) {
+			    void *tmp = realloc(enhkey_usage, req_size);
+
+			    if(!tmp) {
+				git_error_set(GIT_ERROR_SSL, "OpenSSL error: Out of memory allocating for OID list");
+				result = -1;
+				break;
+			    }
+
+			    enhkey_usage = (CERT_ENHKEY_USAGE *)tmp;
+			    enhkey_usage_size = req_size;
+			}
 
-		ERR_error_string_n(ERR_get_error(), errmsg, sizeof(errmsg));
-		git_error_set(GIT_ERROR_SSL, "OpenSSL error: failed to load certificates: %s",
-			errmsg);
+			if(CertGetEnhancedKeyUsage(pContext, 0, enhkey_usage, &req_size)) {
+			    if(!enhkey_usage->cUsageIdentifier) {
+				/* "If GetLastError returns CRYPT_E_NOT_FOUND, the certificate is
+				   good for all uses. If it returns zero, the certificate has no
+				   valid uses." */
+				if(GetLastError() != CRYPT_E_NOT_FOUND)
+				    continue;
+			    } else {
+				DWORD i;
+				bool found = false;
+
+				for(i = 0; i < enhkey_usage->cUsageIdentifier; ++i) {
+				    if(!strcmp("1.3.6.1.5.5.7.3.1" /* OID server auth */,
+					       enhkey_usage->rgpszUsageIdentifier[i])) {
+					found = true;
+					break;
+				    }
+				}
+
+				if(!found)
+				    continue;
+			    }
+			} else
+			    continue;
+		    } else
+				continue;
 
-		return -1;
+		    x509 = d2i_X509(NULL, &encoded_cert, pContext->cbCertEncoded);
+		    if(!x509)
+				continue;
+
+		    /* Try to import the certificate. This may fail for legitimate reasons
+		       such as duplicate certificate, which is allowed by MS but not
+		       OpenSSL. */
+		    if(X509_STORE_add_cert(store, x509) == 1) {
+				do {} while(0);
+		    }
+		    X509_free(x509);
+		}
+
+		free(enhkey_usage);
+		CertFreeCertificateContext(pContext);
+		CertCloseStore(hStore, 0);
+
+		if(result)
+		    return result;
+	    }
+	} else
+#endif
+	{
+		if (SSL_CTX_load_verify_locations(git__ssl_ctx, file, path) == 0) {
+			char errmsg[256];
+
+			ERR_error_string_n(ERR_get_error(), errmsg, sizeof(errmsg));
+			git_error_set(GIT_ERROR_SSL, "OpenSSL error: failed to load certificates: %s",
+				errmsg);
+
+			return -1;
+		}
 	}
 	return 0;
 }
-- 
2.38.1.windows.1

